def application =params.Application
def action =params.Action
def haproxyFromParam= params.haproxy
def backendFromParam =params.backend
def backendServersFromParam = params.backend_server
def publishResults=''
def cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')

pipeline {
    agent any

    stages {

		stage('Parallel execution') {
			parallel {
				stage('Job parameters'){
				steps {
						script{
							println "application : " + application
							println "Action : " + action
						}
					}	
				}
				stage('CSS') {
					when {
						expression {
						'CSS' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								println "Performing "+ action +" on application CSS"								
								def serverDetails = readJSON file: 'Patching_cycle_13/data/CSS.json'
								def HAProxyServers = serverDetails.HAPROXY_SERVERS 
								def css_servers = serverDetails.CSS_NCW_SERVERS
								def backend = serverDetails.CSS_BACKENDS
								def sockFileLoc = serverDetails.SOCKFILE
								def result=''
								def backendFromParamArray =Arrays.asList((backendFromParam).split(","))
								def backendServersFromParamArray = Arrays.asList((backendServersFromParam).split(","))
								def haproxyFromParamArray =Arrays.asList((haproxyFromParam).split(","))
								def server
								
								if(application =='CSS') {
									HAProxyServers = haproxyFromParamArray
									css_servers = backendServersFromParamArray
									backend = backendFromParamArray
									println "HAProxy server selected from parameter: " + HAProxyServers
									println "backend selected from parameter: " + backend
									println "backend server selected from parameter: " + css_servers
								}
								
								if(action=='Pre-Patching'||action=='drain')
								{	
									result = performAction(HAProxyServers, backend, css_servers, 'drain', sockFileLoc )
								}
								else if(action =='Post-Patching'||action=='ready')
								{
									result = performAction(HAProxyServers, backend, css_servers, 'ready', sockFileLoc )
								}
								else if(action =='maint')
								{
									result = performAction(HAProxyServers, backend, css_servers, 'maint', sockFileLoc )
								}	
								publishResults = publishResults + "CSS " + result+ "\n"									
							}catch(Exception e) {
								result ='Failed'
								publishResults = publishResults + "CSS: " + result+ "\n"
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh "exit 1"
								}
							}
						}
					}      
				}
				stage('GPD') {
					when {
						expression {
						'GPD' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								println "Performing "+ action +" on application GPD"								
								def serverDetails = readJSON file: 'Patching_cycle_13/data/GPD.json'
								def HAProxyServers = serverDetails.HAPROXY_SERVERS 
								def gpd_servers = serverDetails.GPD_NCE_SERVERS
								def backend = serverDetails.GPD_BACKEND
								def sockFileLoc = serverDetails.SOCKFILE
								def backendFromParamArray =Arrays.asList((backendFromParam).split(","))
								def backendServersFromParamArray = Arrays.asList((backendServersFromParam).split(","))
								def haproxyFromParamArray =Arrays.asList((haproxyFromParam).split(","))
								def result =''

								if(application =='GPD'){
									HAProxyServers = haproxyFromParamArray
									gpd_servers = backendServersFromParamArray
									backend = backendFromParamArray
									println "HAProxy server selected from parameter: " + HAProxyServers
									println "backend selected from parameter: " + backend
									println "backend server selected from parameter: " + gpd_servers
								}
								
								if(action=='Pre-Patching'||action=='drain')
									
								{	
									result =performAction(HAProxyServers, backend, gpd_servers, 'drain', sockFileLoc )
								}
								else if(action=='Post-Patching'||action=='ready')
								{
									result =performAction(HAProxyServers, backend, gpd_servers, 'ready', sockFileLoc )
								}
								else if(action =='maint')
								{
									result =performAction(HAProxyServers, backend, gpd_server, 'maint', sockFileLoc )
								}					
								publishResults = publishResults + "GPD: " + result+ "\n"
								
							}catch(Exception e) {
								result ='Failed'
								publishResults = publishResults + "GPD: " + result+ "\n"
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh "exit 1"
								}
							}
						}
					}      
				}
				stage('Siebel') {
					when {
						expression {
						'Siebel' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								println "Performing "+ action +" on application Siebel"
								def serverDetails = readJSON file: 'Patching_cycle_13/data/Siebel.json'
								def HAProxyServers = serverDetails.HAPROXY_SERVERS 
								def siebel_servers = serverDetails.SIEBEL_NCW_SERVERS
								def ncebackend= serverDetails.SIEBEL_NCE_BACKEND
								def ncwbackend= serverDetails.SIEBEL_NCW_BACKEND
								def sockFileLoc = serverDetails.SOCKFILE
								def backendFromParamArray =Arrays.asList((backendFromParam).split(","))
								def backendServersFromParamArray = Arrays.asList((backendServersFromParam).split(","))
								def haproxyFromParamArray =Arrays.asList((haproxyFromParam).split(","))
								def backend
								def result

								if(application =='ALL'){
									HAProxyServers = haproxyFromParamArray
									siebel_servers = backendServersFromParamArray
									backend = backendFromParamArray
									println "HAProxy server selected from parameter: " + HAProxyServers
									println "backend selected from parameter: " + backend
									println "backend server selected from parameter: " + siebel_servers
								}								
								if(action=='Pre-Patching'||action=='maint')
									{	
										result =performAction(HAProxyServers, backend, siebel_servers, 'maint', sockFileLoc )
									}
									else if(action=='Post-Patching'||action=='ready')
									{
										result =performAction(HAProxyServers, backend, siebel_servers, 'ready', sockFileLoc )
									}	
									
								publishResults = publishResults + "Siebel: " + result+ "\n"
								
							}catch(Exception e) {
								result ='Failed'
								publishResults = publishResults + "Siebel: " + result+ "\n"
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
									sh "exit 1"
								}
							}
						}      
					}
				}
				stage('Phantom') {
					when {
						expression {
						'Phantom' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								println "Performing "+ action +" on application Phantom"
								def serverDetails = readJSON file: 'Patching_cycle_13/data/Phantom.json'
								def HAProxyServers = serverDetails.HAPROXY_SERVERS 
								def phantom_servers = serverDetails.PHANTOM_NCW_SERVERS
								def phantomBackend =serverDetails.PHANTOM_BACKEND
								def sockFileLoc = serverDetails.SOCKFILE
								def backendFromParamArray =Arrays.asList((backendFromParam).split(","))
								def backendServersFromParamArray = Arrays.asList((backendServersFromParam).split(","))
								def haproxyFromParamArray =Arrays.asList((haproxyFromParam).split(","))
								def PhantomResult
								
								if(application =='ALL'){
								}
								else 
								{	
									HAProxyServers = haproxyFromParamArray
									phantom_servers = backendServersFromParamArray
									backend = backendFromParamArray
									println "HAProxy server selected from parameter: " + HAProxyServers
									println "backend selected from parameter: " + backend
									println "backend server selected from parameter: " + phantom_servers
								}
								
								if(action=='Pre-Patching'||action=='disable')
									{	
										PhantomResult =performAction(HAProxyServers, phantomBackend, phantom_servers, 'disable', sockFileLoc )
									}
									else if(action=='Post-Patching'||action=='enable')
									{
										PhantomResult =performAction(HAProxyServers, phantomBackend, phantom_servers, 'enable', sockFileLoc )
									}	
									
								publishResults = publishResults + "Phantom: " + PhantomResult+ "\n"
								
							}catch(Exception e) {
								PhantomResult ='Failed'
								publishResults = publishResults + "Phantom: " + PhantomResult+ "\n"
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
									sh "exit 1"
								}
							}
						}      
					}
				}
				stage('Phantom UI') {
					when {
						expression {
						'PhantomUI' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								println "Performing "+ action +" on application PhantomUI"
								def serverDetails = readJSON file: 'Patching_cycle_13/data/Phantom.json'
								def HAProxyServers = serverDetails.HAPROXY_SERVERS 
								def phantom_ui_server = serverDetails.UI_NCW_SERVERS
								def phantom_ui_backend =serverDetails.UI_NCW_BACKEND
								def sockFileLoc = serverDetails.SOCKFILE
								def backendFromParamArray =Arrays.asList((backendFromParam).split(","))
								def backendServersFromParamArray = Arrays.asList((backendServersFromParam).split(","))
								def haproxyFromParamArray =Arrays.asList((haproxyFromParam).split(","))
								def UIResult

								if(application =='ALL'){
								
								}
								else 
								{	
									HAProxyServers = haproxyFromParamArray
									phantom_ui_servers = backendServersFromParamArray
									phantom_ui_backend = backendFromParamArray
									println "HAProxy server selected from parameter: " + HAProxyServers
									println "backend selected from parameter: " + backend
									println "backend server selected from parameter: " + phantom_ui_servers
								}
								
								if(action=='Pre-Patching'||action=='disable')
									{	
										UIResult =performAction(HAProxyServers, phantom_ui_backend, phantom_ui_servers, 'disable', sockFileLoc )
									}
									else if(action=='Post-Patching'||action=='enable')
									{
										UIResult =performAction(HAProxyServers, phantom_ui_backend, phantom_ui_servers, 'enable', sockFileLoc )
									}	
									
								publishResults = publishResults + "Phantom UI: " + UIResult+ "\n"
								
							}catch(Exception e) {
								UIResult ='Failed'
								publishResults = publishResults + "Phantom: " + UIResult+ "\n"
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
									sh "exit 1"
								}
							}
						}      
					}
				}  				
			}
		} 
	}
    post {
	always {
		println publishResults
		/*sparkSend credentialsId: 'UnifiedBuyflowSparkBot', 
		message: " Job URL: ${env.JOB_URL} \n BUILD_NUMBER: ${env.BUILD_NUMBER} \n User: ${cause.userName} \n Application: [${Application}] \n Action: [${action}] \n DC: [${datacenter}] \n Build status: [${currentBuild.currentResult}] \n StageResult: [${publishResults}] ",
		spaceList: [[spaceId: 'e26bdaf0-e471-11ed-8020-692d324207aa', 
		spaceName: 'Jenkins Job Status - OPS']]*/
	}
} 
	
}
def performAction(Object HAProxyServers, Object backend, Object server, String action, Object sockFileLoc ){
	def result =''
	for(ha in HAProxyServers) {
		def SSH_OPTION="ssh jenkins_worker@${ha} -o StrictHostKeyChecking=no"
		for(bknd in backend) {
			for(s in server) {
				println "$SSH_OPTION 'echo $action server $bknd/$s | sudo socat stdio $sockFileLoc'"
				try{
					//sh "$SSH_OPTION 'echo $action server $bknd/$s | sudo socat stdio $sockFileLoc'"
					result ='Success'
					
				}catch(Exception e) {
					result ='Failure'	
					catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
						sh "exit 1"
					}
				}
			}
		}
	}
	return result
}

